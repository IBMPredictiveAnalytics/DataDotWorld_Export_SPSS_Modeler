##
# Authors: Amod Upadhye, Deepak Rangarao
# Purpose: SPSS Extension to import Data.World content. High level steps include:
# - Authenticate users with Data.World authentication token 
# - Collect information about Data.World dataset
# - Get content from modeler stream and export to Data.World
##

entered_token<-"%%datadotworld_auth%%"
dataset_title<-%%title%%
visibility <- %%visibility%% 
license_string <- %%license_string%%
description <- %%description%%
selected_data <- %%selected_data%%
      
trim <- function (x) gsub("^\\s+|\\s+$", "", x)

# Function to authenticate to Data.World using authentication token

datadotworldauthenticate<-function() {
        # Use datadotworld properties file to read the authentication token and validate 
        env_properties<-read.properties("datadotworld.properties", fields = NULL, encoding = "UTF-8")
        auth_token<-trim(env_properties$AUTHENTICATION_TOKEN)
        auth_token<-noquote(auth_token)
        print(paste("Found authentication token, ",auth_token))
        configure(auth_token=auth_token)
        get_user()
        }
        
        # Function to check and install required R packages from CRAN
    packages<-function(x){
        x <- as.character(match.call()[[2]])
            if (!require(x,character.only=TRUE)){
                   print("need to install packages")
                   install.packages(pkgs=x,repos="http://cran.r-project.org",type="source")
                   require(x,character.only=TRUE)
            }
      }
                                     
                                     
    ## Function to Upload Dataset to Data.World
    upload_dataset <- function(){
      spssdata <- modelerData[c(selected_data)]
      user_id <- dwapi::get_user()$id
      dataset_name<-paste(user_id,"/",str_replace_all(dataset_title," ","-"),sep="")

      # Prep dw.world request
     request<-  dataset_create_request(title = dataset_title, visibility =visibility, license_string = license_string , description=description  )
# Prep dw.world request
tryCatch({
  created_dataset <- create_dataset(user_id,request)
  dw_dataset_path <- httr::parse_url(created_dataset$uri)$path
  dw_filename<-paste(dataset_title,".csv", sep="")
  upload_data_frame(dw_dataset_path,spssdata,dw_filename)
  
},error=function(e){
  if (grep("already exists",e[1])==1){
    #Dataset exists so need to update the dataset
    update_request<-dataset_update_request(visibility=visibility, license_string=license_string, description=description)
    updated_dataset<-update_dataset(dataset_name,update_request)
    dw_dataset_path <- dataset_name
    dw_filename<-paste(dataset_title,".csv", sep="")
    upload_data_frame(dw_dataset_path,spssdata,dw_filename)
  }
})

     
     }
    
    packages("data.world")
    packages("dwapi")
    packages("properties")
    packages("stringr")
    packages("httr")
    
    setwd(R.home())
    
    # Read Data.World authentication token and authenticate
    print(paste("Looking for Data.World configuration file at ", R.home()))
    if(file.exists("datadotworld.properties"))
    {
        # Authenticate to data.world
        datadotworldauthenticate()
        upload_dataset()
        } else if(entered_token != "DATADOTWORLD_AUTHENTICATION_TOKEN")
        {
                # Create datadotworld.properties file
                fileConn<-file("datadotworld.properties")
                writeLines(c(paste("AUTHENTICATION_TOKEN=",trim(entered_token))), fileConn)
                close(fileConn)
                # Authenticate to data.world
                datadotworldauthenticate()
                upload_dataset()
            } else {
                print("Please enter a valid Data.World authentication token in this screen,")
                print("Alternative place a datadotworld.properties file with one property AUTHENTICATION_TOKEN=<YOUR_DATADOTWORLD_AUTHENTICATION_TOKEN> at the following location")
                print(getwd())
    }



